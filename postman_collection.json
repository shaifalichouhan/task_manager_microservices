{
  "info": {
    "name": "Task Manager Microservices API",
    "_postman_id": "task-manager-microservices-001",
    "description": "Complete API collection for Task Manager Microservices project with Auth, Task, and Notification services",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "auth_service_url",
      "value": "http://localhost:8001",
      "type": "string"
    },
    {
      "key": "task_service_url",
      "value": "http://localhost:8002",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "task_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth Service",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"user_id\", jsonData.id);",
                  "    pm.test(\"User registered successfully\", function () {",
                  "        pm.expect(jsonData).to.have.property('username');",
                  "        pm.expect(jsonData).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"securepass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user in the system"
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
                  "    pm.test(\"Login successful\", function () {",
                  "        pm.expect(jsonData).to.have.property('access_token');",
                  "        pm.expect(jsonData.token_type).to.eql('bearer');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "johndoe",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "securepass123",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with username and password to get JWT token"
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Get currently logged-in user information"
          },
          "response": []
        },
        {
          "name": "Register User (Direct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"test123\"\n}"
            },
            "url": {
              "raw": "{{auth_service_url}}/register",
              "host": ["{{auth_service_url}}"],
              "path": ["register"]
            },
            "description": "Register directly to Auth Service (bypassing gateway)"
          },
          "response": []
        },
        {
          "name": "Login (Direct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "testuser",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "test123",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth_service_url}}/login",
              "host": ["{{auth_service_url}}"],
              "path": ["login"]
            },
            "description": "Login directly to Auth Service (bypassing gateway)"
          },
          "response": []
        }
      ],
      "description": "Authentication and user management endpoints"
    },
    {
      "name": "Task Service",
      "item": [
        {
          "name": "Create Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"task_id\", jsonData.id);",
                  "    pm.test(\"Task created successfully\", function () {",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('title');",
                  "        pm.expect(jsonData.status).to.be.oneOf(['Pending', 'In Progress', 'Completed']);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive README and API documentation\",\n  \"status\": \"Pending\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/",
              "host": ["{{base_url}}"],
              "path": ["tasks", ""]
            },
            "description": "Create a new task for the authenticated user"
          },
          "response": []
        },
        {
          "name": "Get All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks/",
              "host": ["{{base_url}}"],
              "path": ["tasks", ""]
            },
            "description": "Get all tasks for the authenticated user"
          },
          "response": []
        },
        {
          "name": "Get Single Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task details returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["tasks", "{{task_id}}"]
            },
            "description": "Get details of a specific task by ID"
          },
          "response": []
        },
        {
          "name": "Update Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated: Complete project documentation\",\n  \"description\": \"Write comprehensive README, API docs, and Postman collection\",\n  \"status\": \"In Progress\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["tasks", "{{task_id}}"]
            },
            "description": "Update an existing task"
          },
          "response": []
        },
        {
          "name": "Delete Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["tasks", "{{task_id}}"]
            },
            "description": "Delete a task by ID"
          },
          "response": []
        },
        {
          "name": "Create Task - In Progress",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Implement authentication\",\n  \"description\": \"Add JWT authentication to all services\",\n  \"status\": \"In Progress\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/",
              "host": ["{{base_url}}"],
              "path": ["tasks", ""]
            },
            "description": "Create a task with 'In Progress' status"
          },
          "response": []
        },
        {
          "name": "Create Task - Completed",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Setup Docker environment\",\n  \"description\": \"Configure Docker Compose with all services\",\n  \"status\": \"Completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/",
              "host": ["{{base_url}}"],
              "path": ["tasks", ""]
            },
            "description": "Create a completed task"
          },
          "response": []
        }
      ],
      "description": "Task management CRUD operations"
    },
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "API Gateway Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Check if API Gateway is running"
          },
          "response": []
        },
        {
          "name": "Auth Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{auth_service_url}}/",
              "host": ["{{auth_service_url}}"],
              "path": [""]
            },
            "description": "Check if Auth Service is running"
          },
          "response": []
        },
        {
          "name": "Task Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{task_service_url}}/",
              "host": ["{{task_service_url}}"],
              "path": [""]
            },
            "description": "Check if Task Service is running"
          },
          "response": []
        }
      ],
      "description": "Health check endpoints for all services"
    },
    {
      "name": "Complete Workflow",
      "item": [
        {
          "name": "Step 1: Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"demo_user\",\n  \"email\": \"demo@example.com\",\n  \"password\": \"demo123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Step 1: Register a new user"
          },
          "response": []
        },
        {
          "name": "Step 2: Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"access_token\", jsonData.access_token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "demo_user",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "demo123",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Step 2: Login and get JWT token"
          },
          "response": []
        },
        {
          "name": "Step 3: Create First Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"task_id\", jsonData.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My First Task\",\n  \"description\": \"Testing the task creation workflow\",\n  \"status\": \"Pending\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/",
              "host": ["{{base_url}}"],
              "path": ["tasks", ""]
            },
            "description": "Step 3: Create your first task (triggers notification)"
          },
          "response": []
        },
        {
          "name": "Step 4: View All Tasks",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks/",
              "host": ["{{base_url}}"],
              "path": ["tasks", ""]
            },
            "description": "Step 4: View all your tasks"
          },
          "response": []
        },
        {
          "name": "Step 5: Update Task Status",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My First Task\",\n  \"description\": \"Testing the task creation workflow - Updated\",\n  \"status\": \"Completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["tasks", "{{task_id}}"]
            },
            "description": "Step 5: Mark task as completed"
          },
          "response": []
        }
      ],
      "description": "Complete workflow from registration to task completion"
    }
  ]
}