
services:
  # PostgreSQL Database for Auth Service
  postgres_db:
    image: postgres:15-alpine  
    container_name: postgres_db
    environment:
      POSTGRES_DB: task_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d task_manager"]
      interval: 5s
      timeout: 5s
      retries: 10
      

  # MySQL Database for Task Service
  mysql_db:
    image: mariadb:10.11
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: task_manager
      MYSQL_USER: taskuser
      MYSQL_PASSWORD: taskpassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -proot || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth_service:
    build: ./auth_service
    container_name: auth_service
    ports:
      - "8001:8000"
    environment:
      - SQLALCHEMY_DATABASE_URL=postgresql+psycopg2://postgres:postgres@postgres_db:5432/task_manager
      - SECRET_KEY=your-super-secret-key-change-this-in-production-123456789
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    depends_on:
      postgres_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    
    # Add this to your existing docker-compose.yml
  task_service:
    build: ./task_service
    container_name: task_service
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://taskuser:taskpassword@mysql_db:3306/task_manager
      - AUTH_SERVICE_URL=http://auth_service:8000
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - DEBUG=True
    depends_on:
      mysql_db:
        condition: service_healthy
      auth_service:
        condition: service_started
      rabbitmq:
        condition: service_healthy  # Wait for RabbitMQ to be healthy
    restart: unless-stopped
    networks:
      - app_network

  api_gateway:
    build: ./api_gateway
    container_name: api_gateway
    ports:
      - "8000:8000"  # Main entry point
    environment:
      - AUTH_SERVICE_URL=http://auth_service:8000
      - TASK_SERVICE_URL=http://task_service:8000
      - NOTIFICATION_SERVICE_URL=http://notification_service:8000
      - DEBUG=True
    depends_on:
      - auth_service
      - task_service
    restart: unless-stopped
    networks:
      - app_network

      # Add this to your existing docker-compose.yml
  notification_service:
    build: ./notification_service
    container_name: notification_service
    ports:
      - "8003:8000"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin123
      - ENABLE_EMAIL_NOTIFICATIONS=False
      - ENABLE_LOG_NOTIFICATIONS=True
      - DEBUG=True
    depends_on:
      rabbitmq:
        condition: service_healthy  # Wait for RabbitMQ to be healthy
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - ./notification_logs:/app/logs
      
# Define the network
networks:
  app_network:
    driver: bridge

# Define volumes for data persistence
volumes:
  postgres_data:
  mysql_data:
  rabbitmq_data: